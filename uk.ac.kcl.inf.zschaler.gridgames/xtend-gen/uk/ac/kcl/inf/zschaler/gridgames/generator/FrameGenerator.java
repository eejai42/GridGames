package uk.ac.kcl.inf.zschaler.gridgames.generator;

import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.IFileSystemAccess;
import org.eclipse.xtext.xbase.lib.StringExtensions;
import uk.ac.kcl.inf.zschaler.gridgames.generator.CommonGenerator;
import uk.ac.kcl.inf.zschaler.gridgames.gridGame.GridGame;

@SuppressWarnings("all")
public class FrameGenerator extends CommonGenerator {
  public FrameGenerator(final GridGame gg) {
    super(gg);
  }
  
  public void generate(final IFileSystemAccess fsa) {
    StringConcatenation _builder = new StringConcatenation();
    CharSequence _generateFrameClassFileName = this.generateFrameClassFileName();
    _builder.append(_generateFrameClassFileName, "");
    CharSequence _generateFrame = this.generateFrame();
    fsa.generateFile(_builder.toString(), _generateFrame);
  }
  
  public CharSequence generateFrame() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package ");
    CharSequence _generateViewPackage = this.generateViewPackage();
    _builder.append(_generateViewPackage, "");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("import javax.swing.JFrame;");
    _builder.newLine();
    _builder.append("import javax.swing.JTable;");
    _builder.newLine();
    _builder.append("import javax.swing.ListSelectionModel;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import java.awt.FlowLayout;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import ");
    CharSequence _generateModelPackage = this.generateModelPackage();
    _builder.append(_generateModelPackage, "");
    _builder.append(".");
    CharSequence _generateFieldClassName = this.generateFieldClassName();
    _builder.append(_generateFieldClassName, "");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("import ");
    CharSequence _generateCellPackage = this.generateCellPackage();
    _builder.append(_generateCellPackage, "");
    _builder.append(".CellFactory;");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("public class ");
    CharSequence _generateFrameClassName = this.generateFrameClassName();
    _builder.append(_generateFrameClassName, "");
    _builder.append(" extends JFrame {");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private CellFactory cellFactory;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private ");
    CharSequence _generateFieldClassName_1 = this.generateFieldClassName();
    _builder.append(_generateFieldClassName_1, "\t");
    _builder.append(" field;");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("private JTable jtDisplay;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private static final int cellSize = 20;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public ");
    CharSequence _generateFrameClassName_1 = this.generateFrameClassName();
    _builder.append(_generateFrameClassName_1, "\t");
    _builder.append(" (CellFactory cellFactory) {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("super(\"");
    String _name = this.gg.getName();
    String _firstUpper = StringExtensions.toFirstUpper(_name);
    _builder.append(_firstUpper, "\t\t");
    _builder.append("\");");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.cellFactory = cellFactory;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("setDefaultCloseOperation(EXIT_ON_CLOSE);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("field = new ");
    CharSequence _generateFieldClassName_2 = this.generateFieldClassName();
    _builder.append(_generateFieldClassName_2, "\t\t");
    _builder.append(" (cellFactory);");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("initWidgets();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private void initWidgets() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("setLayout(new FlowLayout());");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("setResizable(false);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("jtDisplay = new JTable();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("//jtDisplay.setDefaultRenderer(Cell.class, new MineCellRenderer());");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("jtDisplay.setRowHeight(cellSize);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("jtDisplay.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("jtDisplay.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("jtDisplay.setCellSelectionEnabled(true);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("add(jtDisplay);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
}
