/*
 * generated by Xtext
 */
package uk.ac.kcl.inf.zschaler.gridgames.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class GridGameGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class GridGameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "GridGame");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGameKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cCellsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cCellsCellSpecificationParserRuleCall_3_0 = (RuleCall)cCellsAssignment_3.eContents().get(0);
		private final Assignment cFieldsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cFieldsFieldSpecificationParserRuleCall_4_0 = (RuleCall)cFieldsAssignment_4.eContents().get(0);
		private final Assignment cOptionsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cOptionsOptionSpecificationParserRuleCall_5_0 = (RuleCall)cOptionsAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		/// * 
		// * This language is meant to serve as a high-level modelling language for arcade-style games with a grid playing field
		// * 
		// * Just a bit of fun, really :-)
		// * 
		// * Initially, the main goal is to use this as a source for code generation, generating a complete implementation from a model-level description
		// * / GridGame:
		//	"game" name=ID "{" cells+=CellSpecification+ fields+=FieldSpecification+ options+=OptionSpecification* "}";
		@Override public ParserRule getRule() { return rule; }

		//"game" name=ID "{" cells+=CellSpecification+ fields+=FieldSpecification+ options+=OptionSpecification* "}"
		public Group getGroup() { return cGroup; }

		//"game"
		public Keyword getGameKeyword_0() { return cGameKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//cells+=CellSpecification+
		public Assignment getCellsAssignment_3() { return cCellsAssignment_3; }

		//CellSpecification
		public RuleCall getCellsCellSpecificationParserRuleCall_3_0() { return cCellsCellSpecificationParserRuleCall_3_0; }

		//fields+=FieldSpecification+
		public Assignment getFieldsAssignment_4() { return cFieldsAssignment_4; }

		//FieldSpecification
		public RuleCall getFieldsFieldSpecificationParserRuleCall_4_0() { return cFieldsFieldSpecificationParserRuleCall_4_0; }

		//options+=OptionSpecification*
		public Assignment getOptionsAssignment_5() { return cOptionsAssignment_5; }

		//OptionSpecification
		public RuleCall getOptionsOptionSpecificationParserRuleCall_5_0() { return cOptionsOptionSpecificationParserRuleCall_5_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class CellSpecificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CellSpecification");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCellKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cMembersAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMembersCellMemberParserRuleCall_3_0 = (RuleCall)cMembersAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//CellSpecification:
		//	"cell" name=ID "{" members+=CellMember* "}";
		@Override public ParserRule getRule() { return rule; }

		//"cell" name=ID "{" members+=CellMember* "}"
		public Group getGroup() { return cGroup; }

		//"cell"
		public Keyword getCellKeyword_0() { return cCellKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//members+=CellMember*
		public Assignment getMembersAssignment_3() { return cMembersAssignment_3; }

		//CellMember
		public RuleCall getMembersCellMemberParserRuleCall_3_0() { return cMembersCellMemberParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class CellMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CellMember");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCellDisplaySpecParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCellVarSpecParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//CellMember:
		//	CellDisplaySpec | CellVarSpec;
		@Override public ParserRule getRule() { return rule; }

		//CellDisplaySpec | CellVarSpec
		public Alternatives getAlternatives() { return cAlternatives; }

		//CellDisplaySpec
		public RuleCall getCellDisplaySpecParserRuleCall_0() { return cCellDisplaySpecParserRuleCall_0; }

		//CellVarSpec
		public RuleCall getCellVarSpecParserRuleCall_1() { return cCellVarSpecParserRuleCall_1; }
	}

	public class CellDisplaySpecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CellDisplaySpec");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDisplayKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cAsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cDisplay_typeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Alternatives cDisplay_typeAlternatives_3_0 = (Alternatives)cDisplay_typeAssignment_3.eContents().get(0);
		private final Keyword cDisplay_typeLabelKeyword_3_0_0 = (Keyword)cDisplay_typeAlternatives_3_0.eContents().get(0);
		private final Keyword cDisplay_typeButtonKeyword_3_0_1 = (Keyword)cDisplay_typeAlternatives_3_0.eContents().get(1);
		private final Keyword cTextKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cTextAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cTextSTRINGTerminalRuleCall_5_0 = (RuleCall)cTextAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//CellDisplaySpec:
		//	"display" "{" "as" display_type=("label" | "button") "text" text=STRING "}";
		@Override public ParserRule getRule() { return rule; }

		//"display" "{" "as" display_type=("label" | "button") "text" text=STRING "}"
		public Group getGroup() { return cGroup; }

		//"display"
		public Keyword getDisplayKeyword_0() { return cDisplayKeyword_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//"as"
		public Keyword getAsKeyword_2() { return cAsKeyword_2; }

		//display_type=("label" | "button")
		public Assignment getDisplay_typeAssignment_3() { return cDisplay_typeAssignment_3; }

		//"label" | "button"
		public Alternatives getDisplay_typeAlternatives_3_0() { return cDisplay_typeAlternatives_3_0; }

		//"label"
		public Keyword getDisplay_typeLabelKeyword_3_0_0() { return cDisplay_typeLabelKeyword_3_0_0; }

		//"button"
		public Keyword getDisplay_typeButtonKeyword_3_0_1() { return cDisplay_typeButtonKeyword_3_0_1; }

		//"text"
		public Keyword getTextKeyword_4() { return cTextKeyword_4; }

		//text=STRING
		public Assignment getTextAssignment_5() { return cTextAssignment_5; }

		//STRING
		public RuleCall getTextSTRINGTerminalRuleCall_5_0() { return cTextSTRINGTerminalRuleCall_5_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class CellVarSpecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CellVarSpec");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVarKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cTypeAlternatives_1_0 = (Alternatives)cTypeAssignment_1.eContents().get(0);
		private final Keyword cTypeIntKeyword_1_0_0 = (Keyword)cTypeAlternatives_1_0.eContents().get(0);
		private final Keyword cTypeStringKeyword_1_0_1 = (Keyword)cTypeAlternatives_1_0.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//CellVarSpec:
		//	"var" type=("int" | "String") name=ID;
		@Override public ParserRule getRule() { return rule; }

		//"var" type=("int" | "String") name=ID
		public Group getGroup() { return cGroup; }

		//"var"
		public Keyword getVarKeyword_0() { return cVarKeyword_0; }

		//type=("int" | "String")
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//"int" | "String"
		public Alternatives getTypeAlternatives_1_0() { return cTypeAlternatives_1_0; }

		//"int"
		public Keyword getTypeIntKeyword_1_0_0() { return cTypeIntKeyword_1_0_0; }

		//"String"
		public Keyword getTypeStringKeyword_1_0_1() { return cTypeStringKeyword_1_0_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
	}

	public class FieldSpecificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FieldSpecification");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFieldKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cWidthKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cEqualsSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cWidthAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cWidthINTTerminalRuleCall_5_0 = (RuleCall)cWidthAssignment_5.eContents().get(0);
		private final Keyword cHeightKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cEqualsSignKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cHeightAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cHeightINTTerminalRuleCall_8_0 = (RuleCall)cHeightAssignment_8.eContents().get(0);
		private final Assignment cField_initialisationAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cField_initialisationFieldInitialisationsParserRuleCall_9_0 = (RuleCall)cField_initialisationAssignment_9.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_10 = (Keyword)cGroup.eContents().get(10);
		
		//FieldSpecification:
		//	"field" name=ID "{" "width" "=" width=INT "height" "=" height=INT field_initialisation=FieldInitialisations? "}";
		@Override public ParserRule getRule() { return rule; }

		//"field" name=ID "{" "width" "=" width=INT "height" "=" height=INT field_initialisation=FieldInitialisations? "}"
		public Group getGroup() { return cGroup; }

		//"field"
		public Keyword getFieldKeyword_0() { return cFieldKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//"width"
		public Keyword getWidthKeyword_3() { return cWidthKeyword_3; }

		//"="
		public Keyword getEqualsSignKeyword_4() { return cEqualsSignKeyword_4; }

		//width=INT
		public Assignment getWidthAssignment_5() { return cWidthAssignment_5; }

		//INT
		public RuleCall getWidthINTTerminalRuleCall_5_0() { return cWidthINTTerminalRuleCall_5_0; }

		//"height"
		public Keyword getHeightKeyword_6() { return cHeightKeyword_6; }

		//"="
		public Keyword getEqualsSignKeyword_7() { return cEqualsSignKeyword_7; }

		//height=INT
		public Assignment getHeightAssignment_8() { return cHeightAssignment_8; }

		//INT
		public RuleCall getHeightINTTerminalRuleCall_8_0() { return cHeightINTTerminalRuleCall_8_0; }

		//field_initialisation=FieldInitialisations?
		public Assignment getField_initialisationAssignment_9() { return cField_initialisationAssignment_9; }

		//FieldInitialisations
		public RuleCall getField_initialisationFieldInitialisationsParserRuleCall_9_0() { return cField_initialisationFieldInitialisationsParserRuleCall_9_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_10() { return cRightCurlyBracketKeyword_10; }
	}

	public class OptionSpecificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OptionSpecification");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cStartFieldDeclarationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAllowRestartMenuParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//OptionSpecification:
		//	StartFieldDeclaration | AllowRestartMenu;
		@Override public ParserRule getRule() { return rule; }

		//StartFieldDeclaration | AllowRestartMenu
		public Alternatives getAlternatives() { return cAlternatives; }

		//StartFieldDeclaration
		public RuleCall getStartFieldDeclarationParserRuleCall_0() { return cStartFieldDeclarationParserRuleCall_0; }

		//AllowRestartMenu
		public RuleCall getAllowRestartMenuParserRuleCall_1() { return cAllowRestartMenuParserRuleCall_1; }
	}

	public class AllowRestartMenuElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AllowRestartMenu");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAllow_restartKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cAllowRestartMenuAction_1 = (Action)cGroup.eContents().get(1);
		
		//AllowRestartMenu:
		//	"allow_restart" {AllowRestartMenu};
		@Override public ParserRule getRule() { return rule; }

		//"allow_restart" {AllowRestartMenu}
		public Group getGroup() { return cGroup; }

		//"allow_restart"
		public Keyword getAllow_restartKeyword_0() { return cAllow_restartKeyword_0; }

		//{AllowRestartMenu}
		public Action getAllowRestartMenuAction_1() { return cAllowRestartMenuAction_1; }
	}

	public class StartFieldDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StartFieldDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStartKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cField_nameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cField_nameIDTerminalRuleCall_2_0 = (RuleCall)cField_nameAssignment_2.eContents().get(0);
		
		//StartFieldDeclaration:
		//	"start" "=" field_name=ID;
		@Override public ParserRule getRule() { return rule; }

		//"start" "=" field_name=ID
		public Group getGroup() { return cGroup; }

		//"start"
		public Keyword getStartKeyword_0() { return cStartKeyword_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//field_name=ID
		public Assignment getField_nameAssignment_2() { return cField_nameAssignment_2; }

		//ID
		public RuleCall getField_nameIDTerminalRuleCall_2_0() { return cField_nameIDTerminalRuleCall_2_0; }
	}

	public class FieldInitialisationsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FieldInitialisations");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInitKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cInitialisationsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cInitialisationsFieldInitialisationParserRuleCall_1_0 = (RuleCall)cInitialisationsAssignment_1.eContents().get(0);
		
		//FieldInitialisations:
		//	"init" initialisations+=FieldInitialisation+;
		@Override public ParserRule getRule() { return rule; }

		//"init" initialisations+=FieldInitialisation+
		public Group getGroup() { return cGroup; }

		//"init"
		public Keyword getInitKeyword_0() { return cInitKeyword_0; }

		//initialisations+=FieldInitialisation+
		public Assignment getInitialisationsAssignment_1() { return cInitialisationsAssignment_1; }

		//FieldInitialisation
		public RuleCall getInitialisationsFieldInitialisationParserRuleCall_1_0() { return cInitialisationsFieldInitialisationParserRuleCall_1_0; }
	}

	public class FieldInitialisationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FieldInitialisation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDefaultInitialisationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRandomInitialisationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//FieldInitialisation:
		//	DefaultInitialisation | RandomInitialisation;
		@Override public ParserRule getRule() { return rule; }

		//DefaultInitialisation | RandomInitialisation
		public Alternatives getAlternatives() { return cAlternatives; }

		//DefaultInitialisation
		public RuleCall getDefaultInitialisationParserRuleCall_0() { return cDefaultInitialisationParserRuleCall_0; }

		//RandomInitialisation
		public RuleCall getRandomInitialisationParserRuleCall_1() { return cRandomInitialisationParserRuleCall_1; }
	}

	public class DefaultInitialisationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DefaultInitialisation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDefaultKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cCellAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCellIDTerminalRuleCall_2_0 = (RuleCall)cCellAssignment_2.eContents().get(0);
		
		//DefaultInitialisation:
		//	"default" ":" cell=ID;
		@Override public ParserRule getRule() { return rule; }

		//"default" ":" cell=ID
		public Group getGroup() { return cGroup; }

		//"default"
		public Keyword getDefaultKeyword_0() { return cDefaultKeyword_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//cell=ID
		public Assignment getCellAssignment_2() { return cCellAssignment_2; }

		//ID
		public RuleCall getCellIDTerminalRuleCall_2_0() { return cCellIDTerminalRuleCall_2_0; }
	}

	public class RandomInitialisationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RandomInitialisation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRandomKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cCellAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCellIDTerminalRuleCall_2_0 = (RuleCall)cCellAssignment_2.eContents().get(0);
		private final Keyword cEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cCountAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cCountINTTerminalRuleCall_4_0 = (RuleCall)cCountAssignment_4.eContents().get(0);
		
		//RandomInitialisation:
		//	"random" ":" cell=ID "=" count=INT;
		@Override public ParserRule getRule() { return rule; }

		//"random" ":" cell=ID "=" count=INT
		public Group getGroup() { return cGroup; }

		//"random"
		public Keyword getRandomKeyword_0() { return cRandomKeyword_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//cell=ID
		public Assignment getCellAssignment_2() { return cCellAssignment_2; }

		//ID
		public RuleCall getCellIDTerminalRuleCall_2_0() { return cCellIDTerminalRuleCall_2_0; }

		//"="
		public Keyword getEqualsSignKeyword_3() { return cEqualsSignKeyword_3; }

		//count=INT
		public Assignment getCountAssignment_4() { return cCountAssignment_4; }

		//INT
		public RuleCall getCountINTTerminalRuleCall_4_0() { return cCountINTTerminalRuleCall_4_0; }
	}
	
	
	private final GridGameElements pGridGame;
	private final CellSpecificationElements pCellSpecification;
	private final CellMemberElements pCellMember;
	private final CellDisplaySpecElements pCellDisplaySpec;
	private final CellVarSpecElements pCellVarSpec;
	private final FieldSpecificationElements pFieldSpecification;
	private final OptionSpecificationElements pOptionSpecification;
	private final AllowRestartMenuElements pAllowRestartMenu;
	private final StartFieldDeclarationElements pStartFieldDeclaration;
	private final FieldInitialisationsElements pFieldInitialisations;
	private final FieldInitialisationElements pFieldInitialisation;
	private final DefaultInitialisationElements pDefaultInitialisation;
	private final RandomInitialisationElements pRandomInitialisation;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public GridGameGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pGridGame = new GridGameElements();
		this.pCellSpecification = new CellSpecificationElements();
		this.pCellMember = new CellMemberElements();
		this.pCellDisplaySpec = new CellDisplaySpecElements();
		this.pCellVarSpec = new CellVarSpecElements();
		this.pFieldSpecification = new FieldSpecificationElements();
		this.pOptionSpecification = new OptionSpecificationElements();
		this.pAllowRestartMenu = new AllowRestartMenuElements();
		this.pStartFieldDeclaration = new StartFieldDeclarationElements();
		this.pFieldInitialisations = new FieldInitialisationsElements();
		this.pFieldInitialisation = new FieldInitialisationElements();
		this.pDefaultInitialisation = new DefaultInitialisationElements();
		this.pRandomInitialisation = new RandomInitialisationElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("uk.ac.kcl.inf.zschaler.gridgames.GridGame".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	/// * 
	// * This language is meant to serve as a high-level modelling language for arcade-style games with a grid playing field
	// * 
	// * Just a bit of fun, really :-)
	// * 
	// * Initially, the main goal is to use this as a source for code generation, generating a complete implementation from a model-level description
	// * / GridGame:
	//	"game" name=ID "{" cells+=CellSpecification+ fields+=FieldSpecification+ options+=OptionSpecification* "}";
	public GridGameElements getGridGameAccess() {
		return pGridGame;
	}
	
	public ParserRule getGridGameRule() {
		return getGridGameAccess().getRule();
	}

	//CellSpecification:
	//	"cell" name=ID "{" members+=CellMember* "}";
	public CellSpecificationElements getCellSpecificationAccess() {
		return pCellSpecification;
	}
	
	public ParserRule getCellSpecificationRule() {
		return getCellSpecificationAccess().getRule();
	}

	//CellMember:
	//	CellDisplaySpec | CellVarSpec;
	public CellMemberElements getCellMemberAccess() {
		return pCellMember;
	}
	
	public ParserRule getCellMemberRule() {
		return getCellMemberAccess().getRule();
	}

	//CellDisplaySpec:
	//	"display" "{" "as" display_type=("label" | "button") "text" text=STRING "}";
	public CellDisplaySpecElements getCellDisplaySpecAccess() {
		return pCellDisplaySpec;
	}
	
	public ParserRule getCellDisplaySpecRule() {
		return getCellDisplaySpecAccess().getRule();
	}

	//CellVarSpec:
	//	"var" type=("int" | "String") name=ID;
	public CellVarSpecElements getCellVarSpecAccess() {
		return pCellVarSpec;
	}
	
	public ParserRule getCellVarSpecRule() {
		return getCellVarSpecAccess().getRule();
	}

	//FieldSpecification:
	//	"field" name=ID "{" "width" "=" width=INT "height" "=" height=INT field_initialisation=FieldInitialisations? "}";
	public FieldSpecificationElements getFieldSpecificationAccess() {
		return pFieldSpecification;
	}
	
	public ParserRule getFieldSpecificationRule() {
		return getFieldSpecificationAccess().getRule();
	}

	//OptionSpecification:
	//	StartFieldDeclaration | AllowRestartMenu;
	public OptionSpecificationElements getOptionSpecificationAccess() {
		return pOptionSpecification;
	}
	
	public ParserRule getOptionSpecificationRule() {
		return getOptionSpecificationAccess().getRule();
	}

	//AllowRestartMenu:
	//	"allow_restart" {AllowRestartMenu};
	public AllowRestartMenuElements getAllowRestartMenuAccess() {
		return pAllowRestartMenu;
	}
	
	public ParserRule getAllowRestartMenuRule() {
		return getAllowRestartMenuAccess().getRule();
	}

	//StartFieldDeclaration:
	//	"start" "=" field_name=ID;
	public StartFieldDeclarationElements getStartFieldDeclarationAccess() {
		return pStartFieldDeclaration;
	}
	
	public ParserRule getStartFieldDeclarationRule() {
		return getStartFieldDeclarationAccess().getRule();
	}

	//FieldInitialisations:
	//	"init" initialisations+=FieldInitialisation+;
	public FieldInitialisationsElements getFieldInitialisationsAccess() {
		return pFieldInitialisations;
	}
	
	public ParserRule getFieldInitialisationsRule() {
		return getFieldInitialisationsAccess().getRule();
	}

	//FieldInitialisation:
	//	DefaultInitialisation | RandomInitialisation;
	public FieldInitialisationElements getFieldInitialisationAccess() {
		return pFieldInitialisation;
	}
	
	public ParserRule getFieldInitialisationRule() {
		return getFieldInitialisationAccess().getRule();
	}

	//DefaultInitialisation:
	//	"default" ":" cell=ID;
	public DefaultInitialisationElements getDefaultInitialisationAccess() {
		return pDefaultInitialisation;
	}
	
	public ParserRule getDefaultInitialisationRule() {
		return getDefaultInitialisationAccess().getRule();
	}

	//RandomInitialisation:
	//	"random" ":" cell=ID "=" count=INT;
	public RandomInitialisationElements getRandomInitialisationAccess() {
		return pRandomInitialisation;
	}
	
	public ParserRule getRandomInitialisationRule() {
		return getRandomInitialisationAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
