/*
 * generated by Xtext
 */
package uk.ac.kcl.inf.zschaler.gridgames.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import uk.ac.kcl.inf.zschaler.gridgames.gridGame.AllowRestartMenu;
import uk.ac.kcl.inf.zschaler.gridgames.gridGame.BehaviourReference;
import uk.ac.kcl.inf.zschaler.gridgames.gridGame.CellDisplaySpec;
import uk.ac.kcl.inf.zschaler.gridgames.gridGame.CellSpecification;
import uk.ac.kcl.inf.zschaler.gridgames.gridGame.CellState;
import uk.ac.kcl.inf.zschaler.gridgames.gridGame.CellStateSpecReference;
import uk.ac.kcl.inf.zschaler.gridgames.gridGame.CellVarSpec;
import uk.ac.kcl.inf.zschaler.gridgames.gridGame.ContextExpression;
import uk.ac.kcl.inf.zschaler.gridgames.gridGame.ContextInitialisation;
import uk.ac.kcl.inf.zschaler.gridgames.gridGame.ContextTrigger;
import uk.ac.kcl.inf.zschaler.gridgames.gridGame.CountExpression;
import uk.ac.kcl.inf.zschaler.gridgames.gridGame.DefaultInitialisation;
import uk.ac.kcl.inf.zschaler.gridgames.gridGame.EmptyExpression;
import uk.ac.kcl.inf.zschaler.gridgames.gridGame.EndGameBehaviour;
import uk.ac.kcl.inf.zschaler.gridgames.gridGame.FieldInitialisationsRef;
import uk.ac.kcl.inf.zschaler.gridgames.gridGame.FieldSpecification;
import uk.ac.kcl.inf.zschaler.gridgames.gridGame.FilterExpression;
import uk.ac.kcl.inf.zschaler.gridgames.gridGame.GenerationalContexts;
import uk.ac.kcl.inf.zschaler.gridgames.gridGame.GlobalAction;
import uk.ac.kcl.inf.zschaler.gridgames.gridGame.GlobalCellStateSpec;
import uk.ac.kcl.inf.zschaler.gridgames.gridGame.GlobalFieldInitialisation;
import uk.ac.kcl.inf.zschaler.gridgames.gridGame.GridGame;
import uk.ac.kcl.inf.zschaler.gridgames.gridGame.GridGamePackage;
import uk.ac.kcl.inf.zschaler.gridgames.gridGame.IntValue;
import uk.ac.kcl.inf.zschaler.gridgames.gridGame.LocalCellStateSpec;
import uk.ac.kcl.inf.zschaler.gridgames.gridGame.LocalFieldInitialisations;
import uk.ac.kcl.inf.zschaler.gridgames.gridGame.MouseTrigger;
import uk.ac.kcl.inf.zschaler.gridgames.gridGame.NoOpBehaviour;
import uk.ac.kcl.inf.zschaler.gridgames.gridGame.NotEmptyExpression;
import uk.ac.kcl.inf.zschaler.gridgames.gridGame.ParamSpec;
import uk.ac.kcl.inf.zschaler.gridgames.gridGame.RandomInitialisation;
import uk.ac.kcl.inf.zschaler.gridgames.gridGame.StartFieldDeclaration;
import uk.ac.kcl.inf.zschaler.gridgames.gridGame.StateFilterExpression;
import uk.ac.kcl.inf.zschaler.gridgames.gridGame.StringValue;
import uk.ac.kcl.inf.zschaler.gridgames.gridGame.TransitionSpec;
import uk.ac.kcl.inf.zschaler.gridgames.gridGame.VarRefValue;
import uk.ac.kcl.inf.zschaler.gridgames.services.GridGameGrammarAccess;

@SuppressWarnings("all")
public class GridGameSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private GridGameGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == GridGamePackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case GridGamePackage.ALLOW_RESTART_MENU:
				sequence_AllowRestartMenu(context, (AllowRestartMenu) semanticObject); 
				return; 
			case GridGamePackage.BEHAVIOUR_REFERENCE:
				sequence_BehaviourReference(context, (BehaviourReference) semanticObject); 
				return; 
			case GridGamePackage.CELL_DISPLAY_SPEC:
				sequence_CellDisplaySpec(context, (CellDisplaySpec) semanticObject); 
				return; 
			case GridGamePackage.CELL_SPECIFICATION:
				sequence_CellSpecification(context, (CellSpecification) semanticObject); 
				return; 
			case GridGamePackage.CELL_STATE:
				sequence_CellState(context, (CellState) semanticObject); 
				return; 
			case GridGamePackage.CELL_STATE_SPEC_REFERENCE:
				sequence_CellStateSpecReference(context, (CellStateSpecReference) semanticObject); 
				return; 
			case GridGamePackage.CELL_VAR_SPEC:
				sequence_CellVarSpec(context, (CellVarSpec) semanticObject); 
				return; 
			case GridGamePackage.CONTEXT_EXPRESSION:
				sequence_ContextExpression(context, (ContextExpression) semanticObject); 
				return; 
			case GridGamePackage.CONTEXT_INITIALISATION:
				sequence_ContextInitialisation(context, (ContextInitialisation) semanticObject); 
				return; 
			case GridGamePackage.CONTEXT_TRIGGER:
				sequence_ContextTrigger(context, (ContextTrigger) semanticObject); 
				return; 
			case GridGamePackage.COUNT_EXPRESSION:
				sequence_CountExpression(context, (CountExpression) semanticObject); 
				return; 
			case GridGamePackage.DEFAULT_INITIALISATION:
				sequence_DefaultInitialisation(context, (DefaultInitialisation) semanticObject); 
				return; 
			case GridGamePackage.EMPTY_EXPRESSION:
				sequence_EmptyExpression(context, (EmptyExpression) semanticObject); 
				return; 
			case GridGamePackage.END_GAME_BEHAVIOUR:
				sequence_EndGameBehaviour(context, (EndGameBehaviour) semanticObject); 
				return; 
			case GridGamePackage.FIELD_INITIALISATIONS_REF:
				sequence_FieldInitialisationsRef(context, (FieldInitialisationsRef) semanticObject); 
				return; 
			case GridGamePackage.FIELD_SPECIFICATION:
				sequence_FieldSpecification(context, (FieldSpecification) semanticObject); 
				return; 
			case GridGamePackage.FILTER_EXPRESSION:
				sequence_FilterExpression(context, (FilterExpression) semanticObject); 
				return; 
			case GridGamePackage.GENERATIONAL_CONTEXTS:
				sequence_GenerationalContexts(context, (GenerationalContexts) semanticObject); 
				return; 
			case GridGamePackage.GLOBAL_ACTION:
				sequence_GlobalAction(context, (GlobalAction) semanticObject); 
				return; 
			case GridGamePackage.GLOBAL_CELL_STATE_SPEC:
				sequence_GlobalCellStateSpec(context, (GlobalCellStateSpec) semanticObject); 
				return; 
			case GridGamePackage.GLOBAL_FIELD_INITIALISATION:
				sequence_GlobalFieldInitialisation(context, (GlobalFieldInitialisation) semanticObject); 
				return; 
			case GridGamePackage.GRID_GAME:
				sequence_GridGame(context, (GridGame) semanticObject); 
				return; 
			case GridGamePackage.INT_VALUE:
				sequence_IntValue(context, (IntValue) semanticObject); 
				return; 
			case GridGamePackage.LOCAL_CELL_STATE_SPEC:
				sequence_LocalCellStateSpec(context, (LocalCellStateSpec) semanticObject); 
				return; 
			case GridGamePackage.LOCAL_FIELD_INITIALISATIONS:
				sequence_LocalFieldInitialisations(context, (LocalFieldInitialisations) semanticObject); 
				return; 
			case GridGamePackage.MOUSE_TRIGGER:
				sequence_MouseTrigger(context, (MouseTrigger) semanticObject); 
				return; 
			case GridGamePackage.NO_OP_BEHAVIOUR:
				sequence_DirectBehaviour(context, (NoOpBehaviour) semanticObject); 
				return; 
			case GridGamePackage.NOT_EMPTY_EXPRESSION:
				sequence_NotEmptyExpression(context, (NotEmptyExpression) semanticObject); 
				return; 
			case GridGamePackage.PARAM_SPEC:
				sequence_ParamSpec(context, (ParamSpec) semanticObject); 
				return; 
			case GridGamePackage.RANDOM_INITIALISATION:
				sequence_RandomInitialisation(context, (RandomInitialisation) semanticObject); 
				return; 
			case GridGamePackage.START_FIELD_DECLARATION:
				sequence_StartFieldDeclaration(context, (StartFieldDeclaration) semanticObject); 
				return; 
			case GridGamePackage.STATE_FILTER_EXPRESSION:
				sequence_StateFilterExpression(context, (StateFilterExpression) semanticObject); 
				return; 
			case GridGamePackage.STRING_VALUE:
				sequence_StringValue(context, (StringValue) semanticObject); 
				return; 
			case GridGamePackage.TRANSITION_SPEC:
				sequence_TransitionSpec(context, (TransitionSpec) semanticObject); 
				return; 
			case GridGamePackage.VAR_REF_VALUE:
				sequence_VarRefValue(context, (VarRefValue) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     OptionSpecification returns AllowRestartMenu
	 *     AllowRestartMenu returns AllowRestartMenu
	 *
	 * Constraint:
	 *     {AllowRestartMenu}
	 */
	protected void sequence_AllowRestartMenu(ISerializationContext context, AllowRestartMenu semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CellStateBehaviour returns BehaviourReference
	 *     BehaviourReference returns BehaviourReference
	 *
	 * Constraint:
	 *     ref=[VarSpec|ID]
	 */
	protected void sequence_BehaviourReference(ISerializationContext context, BehaviourReference semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GridGamePackage.Literals.BEHAVIOUR_REFERENCE__REF) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GridGamePackage.Literals.BEHAVIOUR_REFERENCE__REF));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getBehaviourReferenceAccess().getRefVarSpecIDTerminalRuleCall_0_1(), semanticObject.getRef());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     CellMember returns CellDisplaySpec
	 *     CellDisplaySpec returns CellDisplaySpec
	 *
	 * Constraint:
	 *     (
	 *         (display_type='label' | display_type='button') 
	 *         (
	 *             text=STRING | 
	 *             var=[VarSpec|ID] | 
	 *             color='black' | 
	 *             color='white' | 
	 *             color='yellow' | 
	 *             color='red' | 
	 *             color='green'
	 *         )
	 *     )
	 */
	protected void sequence_CellDisplaySpec(ISerializationContext context, CellDisplaySpec semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CellSpecification returns CellSpecification
	 *
	 * Constraint:
	 *     (name=ID members+=CellMember*)
	 */
	protected void sequence_CellSpecification(ISerializationContext context, CellSpecification semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CellMember returns CellStateSpecReference
	 *     CellStateSpec returns CellStateSpecReference
	 *     CellStateSpecReference returns CellStateSpecReference
	 *
	 * Constraint:
	 *     (stateSpec=[GlobalCellStateSpec|ID] (params+=Value params+=Value*)?)
	 */
	protected void sequence_CellStateSpecReference(ISerializationContext context, CellStateSpecReference semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CellState returns CellState
	 *
	 * Constraint:
	 *     (name=ID display=CellDisplaySpec transitions+=TransitionSpec* (onEnter+=CellStateBehaviour onEnter+=CellStateBehaviour*)?)
	 */
	protected void sequence_CellState(ISerializationContext context, CellState semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CellMember returns CellVarSpec
	 *     VarSpec returns CellVarSpec
	 *     CellVarSpec returns CellVarSpec
	 *
	 * Constraint:
	 *     ((type='int' | type='String') name=ID)
	 */
	protected void sequence_CellVarSpec(ISerializationContext context, CellVarSpec semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ContextExpression returns ContextExpression
	 *
	 * Constraint:
	 *     (sub_exp+=AtomicExpression sub_exp+=AtomicExpression*)
	 */
	protected void sequence_ContextExpression(ISerializationContext context, ContextExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FieldInitialisation returns ContextInitialisation
	 *     ContextInitialisation returns ContextInitialisation
	 *
	 * Constraint:
	 *     (cell=[CellSpecification|ID] check=ContextExpression exp=ContextExpression)
	 */
	protected void sequence_ContextInitialisation(ISerializationContext context, ContextInitialisation semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GridGamePackage.Literals.FIELD_INITIALISATION__CELL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GridGamePackage.Literals.FIELD_INITIALISATION__CELL));
			if (transientValues.isValueTransient(semanticObject, GridGamePackage.Literals.CONTEXT_INITIALISATION__CHECK) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GridGamePackage.Literals.CONTEXT_INITIALISATION__CHECK));
			if (transientValues.isValueTransient(semanticObject, GridGamePackage.Literals.CONTEXT_INITIALISATION__EXP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GridGamePackage.Literals.CONTEXT_INITIALISATION__EXP));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getContextInitialisationAccess().getCellCellSpecificationIDTerminalRuleCall_2_0_1(), semanticObject.getCell());
		feeder.accept(grammarAccess.getContextInitialisationAccess().getCheckContextExpressionParserRuleCall_4_0(), semanticObject.getCheck());
		feeder.accept(grammarAccess.getContextInitialisationAccess().getExpContextExpressionParserRuleCall_7_0(), semanticObject.getExp());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     TransitionTriggerSpec returns ContextTrigger
	 *     ContextTrigger returns ContextTrigger
	 *
	 * Constraint:
	 *     exp=ContextExpression
	 */
	protected void sequence_ContextTrigger(ISerializationContext context, ContextTrigger semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GridGamePackage.Literals.CONTEXT_TRIGGER__EXP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GridGamePackage.Literals.CONTEXT_TRIGGER__EXP));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getContextTriggerAccess().getExpContextExpressionParserRuleCall_2_0(), semanticObject.getExp());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     AtomicExpression returns CountExpression
	 *     CountExpression returns CountExpression
	 *
	 * Constraint:
	 *     ((op='==' | op='>' | op='<') cmpVal=INT)?
	 */
	protected void sequence_CountExpression(ISerializationContext context, CountExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FieldInitialisation returns DefaultInitialisation
	 *     DefaultInitialisation returns DefaultInitialisation
	 *
	 * Constraint:
	 *     cell=[CellSpecification|ID]
	 */
	protected void sequence_DefaultInitialisation(ISerializationContext context, DefaultInitialisation semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GridGamePackage.Literals.FIELD_INITIALISATION__CELL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GridGamePackage.Literals.FIELD_INITIALISATION__CELL));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDefaultInitialisationAccess().getCellCellSpecificationIDTerminalRuleCall_2_0_1(), semanticObject.getCell());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Value returns NoOpBehaviour
	 *     CellStateBehaviour returns NoOpBehaviour
	 *     DirectBehaviour returns NoOpBehaviour
	 *
	 * Constraint:
	 *     {NoOpBehaviour}
	 */
	protected void sequence_DirectBehaviour(ISerializationContext context, NoOpBehaviour semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AtomicExpression returns EmptyExpression
	 *     EmptyExpression returns EmptyExpression
	 *
	 * Constraint:
	 *     {EmptyExpression}
	 */
	protected void sequence_EmptyExpression(ISerializationContext context, EmptyExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Value returns EndGameBehaviour
	 *     CellStateBehaviour returns EndGameBehaviour
	 *     DirectBehaviour returns EndGameBehaviour
	 *     EndGameBehaviour returns EndGameBehaviour
	 *
	 * Constraint:
	 *     message=STRING
	 */
	protected void sequence_EndGameBehaviour(ISerializationContext context, EndGameBehaviour semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GridGamePackage.Literals.END_GAME_BEHAVIOUR__MESSAGE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GridGamePackage.Literals.END_GAME_BEHAVIOUR__MESSAGE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEndGameBehaviourAccess().getMessageSTRINGTerminalRuleCall_2_0(), semanticObject.getMessage());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     FieldInitialisations returns FieldInitialisationsRef
	 *     FieldInitialisationsRef returns FieldInitialisationsRef
	 *
	 * Constraint:
	 *     (ref=[GlobalFieldInitialisation|ID] (params+=Value params+=Value*)?)
	 */
	protected void sequence_FieldInitialisationsRef(ISerializationContext context, FieldInitialisationsRef semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FieldSpecification returns FieldSpecification
	 *
	 * Constraint:
	 *     (name=ID width=INT height=INT field_initialisation=FieldInitialisations?)
	 */
	protected void sequence_FieldSpecification(ISerializationContext context, FieldSpecification semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AtomicExpression returns FilterExpression
	 *     FilterExpression returns FilterExpression
	 *
	 * Constraint:
	 *     (cell_type+=[CellSpecification|ID] cell_type+=[CellSpecification|ID]*)
	 */
	protected void sequence_FilterExpression(ISerializationContext context, FilterExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     OptionSpecification returns GenerationalContexts
	 *     GenerationalContexts returns GenerationalContexts
	 *
	 * Constraint:
	 *     {GenerationalContexts}
	 */
	protected void sequence_GenerationalContexts(ISerializationContext context, GenerationalContexts semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     GlobalAction returns GlobalAction
	 *
	 * Constraint:
	 *     (name=ID trigger=ContextExpression behaviour=DirectBehaviour)
	 */
	protected void sequence_GlobalAction(ISerializationContext context, GlobalAction semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GridGamePackage.Literals.GLOBAL_ACTION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GridGamePackage.Literals.GLOBAL_ACTION__NAME));
			if (transientValues.isValueTransient(semanticObject, GridGamePackage.Literals.GLOBAL_ACTION__TRIGGER) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GridGamePackage.Literals.GLOBAL_ACTION__TRIGGER));
			if (transientValues.isValueTransient(semanticObject, GridGamePackage.Literals.GLOBAL_ACTION__BEHAVIOUR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GridGamePackage.Literals.GLOBAL_ACTION__BEHAVIOUR));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getGlobalActionAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getGlobalActionAccess().getTriggerContextExpressionParserRuleCall_4_0(), semanticObject.getTrigger());
		feeder.accept(grammarAccess.getGlobalActionAccess().getBehaviourDirectBehaviourParserRuleCall_6_0(), semanticObject.getBehaviour());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     GlobalCellStateSpec returns GlobalCellStateSpec
	 *
	 * Constraint:
	 *     (name=ID (params+=ParamSpec params+=ParamSpec*)? states+=CellState+ start=[CellState|ID])
	 */
	protected void sequence_GlobalCellStateSpec(ISerializationContext context, GlobalCellStateSpec semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     GlobalFieldInitialisation returns GlobalFieldInitialisation
	 *
	 * Constraint:
	 *     (name=ID (params+=ParamSpec params+=ParamSpec*)? initialisations+=FieldInitialisation+)
	 */
	protected void sequence_GlobalFieldInitialisation(ISerializationContext context, GlobalFieldInitialisation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     GridGame returns GridGame
	 *
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         (
	 *             states+=GlobalCellStateSpec | 
	 *             cells+=CellSpecification | 
	 *             globalActions+=GlobalAction | 
	 *             inits+=GlobalFieldInitialisation | 
	 *             fields+=FieldSpecification | 
	 *             options+=OptionSpecification
	 *         )+
	 *     )
	 */
	protected void sequence_GridGame(ISerializationContext context, GridGame semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Value returns IntValue
	 *     IntValue returns IntValue
	 *
	 * Constraint:
	 *     value=INT
	 */
	protected void sequence_IntValue(ISerializationContext context, IntValue semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GridGamePackage.Literals.INT_VALUE__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GridGamePackage.Literals.INT_VALUE__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getIntValueAccess().getValueINTTerminalRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     CellMember returns LocalCellStateSpec
	 *     CellStateSpec returns LocalCellStateSpec
	 *     LocalCellStateSpec returns LocalCellStateSpec
	 *
	 * Constraint:
	 *     (states+=CellState+ start=[CellState|ID])
	 */
	protected void sequence_LocalCellStateSpec(ISerializationContext context, LocalCellStateSpec semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FieldInitialisations returns LocalFieldInitialisations
	 *     LocalFieldInitialisations returns LocalFieldInitialisations
	 *
	 * Constraint:
	 *     initialisations+=FieldInitialisation+
	 */
	protected void sequence_LocalFieldInitialisations(ISerializationContext context, LocalFieldInitialisations semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TransitionTriggerSpec returns MouseTrigger
	 *     MouseTrigger returns MouseTrigger
	 *
	 * Constraint:
	 *     left?='mouse-left'?
	 */
	protected void sequence_MouseTrigger(ISerializationContext context, MouseTrigger semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AtomicExpression returns NotEmptyExpression
	 *     NotEmptyExpression returns NotEmptyExpression
	 *
	 * Constraint:
	 *     {NotEmptyExpression}
	 */
	protected void sequence_NotEmptyExpression(ISerializationContext context, NotEmptyExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     VarSpec returns ParamSpec
	 *     ParamSpec returns ParamSpec
	 *
	 * Constraint:
	 *     ((type='int' | type='String' | type='Behaviour') name=ID)
	 */
	protected void sequence_ParamSpec(ISerializationContext context, ParamSpec semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FieldInitialisation returns RandomInitialisation
	 *     RandomInitialisation returns RandomInitialisation
	 *
	 * Constraint:
	 *     (cell=[CellSpecification|ID] (count=INT | var=[VarSpec|ID]))
	 */
	protected void sequence_RandomInitialisation(ISerializationContext context, RandomInitialisation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     OptionSpecification returns StartFieldDeclaration
	 *     StartFieldDeclaration returns StartFieldDeclaration
	 *
	 * Constraint:
	 *     field=[FieldSpecification|ID]
	 */
	protected void sequence_StartFieldDeclaration(ISerializationContext context, StartFieldDeclaration semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GridGamePackage.Literals.START_FIELD_DECLARATION__FIELD) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GridGamePackage.Literals.START_FIELD_DECLARATION__FIELD));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getStartFieldDeclarationAccess().getFieldFieldSpecificationIDTerminalRuleCall_2_0_1(), semanticObject.getField());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     AtomicExpression returns StateFilterExpression
	 *     StateFilterExpression returns StateFilterExpression
	 *
	 * Constraint:
	 *     (cell_state+=[CellState|ID] cell_state+=[CellState|ID]*)
	 */
	protected void sequence_StateFilterExpression(ISerializationContext context, StateFilterExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Value returns StringValue
	 *     StringValue returns StringValue
	 *
	 * Constraint:
	 *     value=STRING
	 */
	protected void sequence_StringValue(ISerializationContext context, StringValue semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GridGamePackage.Literals.STRING_VALUE__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GridGamePackage.Literals.STRING_VALUE__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getStringValueAccess().getValueSTRINGTerminalRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     TransitionSpec returns TransitionSpec
	 *
	 * Constraint:
	 *     (trigger=TransitionTriggerSpec target=[CellState|ID])
	 */
	protected void sequence_TransitionSpec(ISerializationContext context, TransitionSpec semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GridGamePackage.Literals.TRANSITION_SPEC__TRIGGER) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GridGamePackage.Literals.TRANSITION_SPEC__TRIGGER));
			if (transientValues.isValueTransient(semanticObject, GridGamePackage.Literals.TRANSITION_SPEC__TARGET) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GridGamePackage.Literals.TRANSITION_SPEC__TARGET));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTransitionSpecAccess().getTriggerTransitionTriggerSpecParserRuleCall_1_0(), semanticObject.getTrigger());
		feeder.accept(grammarAccess.getTransitionSpecAccess().getTargetCellStateIDTerminalRuleCall_3_0_1(), semanticObject.getTarget());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Value returns VarRefValue
	 *     VarRefValue returns VarRefValue
	 *
	 * Constraint:
	 *     ref=[CellVarSpec|ID]
	 */
	protected void sequence_VarRefValue(ISerializationContext context, VarRefValue semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GridGamePackage.Literals.VAR_REF_VALUE__REF) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GridGamePackage.Literals.VAR_REF_VALUE__REF));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getVarRefValueAccess().getRefCellVarSpecIDTerminalRuleCall_0_1(), semanticObject.getRef());
		feeder.finish();
	}
	
	
}
